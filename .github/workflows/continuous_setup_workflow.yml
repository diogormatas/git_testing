name: Continuous Setup

on:
  push:
    branches:
      - master

jobs:
  find_projects:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set_projects.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Find project folders
        id: set_projects
        run: |
          projects=$(find ./* -maxdepth 0 -type d -not -name 'template' -printf "%f\n")
          echo "::set-output name=projects::$projects"

  job_setup:
    needs: find_projects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.find_projects.outputs.projects) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Run setup for project ${{ matrix.project }}
        run: |
          tool_name=$(basename "${{ matrix.project }}")
          echo "Running setup for $tool_name"
          cd "${{ matrix.project }}"
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          if [ -f "setup.py" ]; then
            python setup.py
          fi
          cd ..
  
  job_tests:
    needs: job_setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.find_projects.outputs.projects) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Run tests for project ${{ matrix.project }}
        run: |
          tool_name=$(basename "${{ matrix.project }}")
          echo "Running tests for $tool_name"
          cd "${{ matrix.project }}"
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          if [ -f "tests.py" ]; then
            python tests.py
          fi
          cd ..
